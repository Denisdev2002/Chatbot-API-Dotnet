// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(ContextDatabase))]
    partial class ContextDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSession")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdSession");

                    b.HasIndex("ResponseId");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdConversation")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSession")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("session_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdConversation");

                    b.HasIndex("IdSession");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Response", b =>
                {
                    b.Property<string>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseId");

                    b.ToTable("Response", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Session", b =>
                {
                    b.Property<string>("IdSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("IdSession");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Source", b =>
                {
                    b.Property<string>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("PageDocument")
                        .HasColumnType("real");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceDocument")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SourceId");

                    b.HasIndex("ResponseId");

                    b.ToTable("Source", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("countSession")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Conversation", b =>
                {
                    b.HasOne("Domain.Entities.Session", "Session")
                        .WithMany("Conversations")
                        .HasForeignKey("IdSession");

                    b.HasOne("Domain.Entities.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.Navigation("Response");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("IdConversation");

                    b.HasOne("Domain.Entities.Session", "Session")
                        .WithMany("Question")
                        .HasForeignKey("IdSession");

                    b.Navigation("Conversation");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Domain.Entities.Source", b =>
                {
                    b.HasOne("Domain.Entities.Response", null)
                        .WithMany("Sources")
                        .HasForeignKey("ResponseId");
                });

            modelBuilder.Entity("Domain.Entities.Response", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Domain.Entities.Session", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
